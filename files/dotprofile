# set common env vars
export PATH="${HOME}/.asdf/bin:${HOME}/.asdf/shims:${HOME}/bin:${HOME}/go/bin:${HOME}/.cargo/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/opt:${HOME}/Library/Python/3.*/bin:$(/usr/bin/getconf PATH):/usr/local/bin"
export HISTCONTROL=ignorespace:ignoredupes:erasedups
export DIRENV_LOG_FORMAT=
export BASH_SILENCE_DEPRECATION_WARNING=1
export SHORT_SHELL="$(echo $(basename $SHELL))"
export TZ_LIST="UTC;US/Pacific;US/Arizona;US/Mountain;US/Central;US/Eastern;Europe/London;Europe/Dublin"
export GOPATH="${HOME}/go"
export VIRTUAL_ENV_DISABLE_PROMPT=1 # Venv name is handled by oh-my-posh prompt config

# set my favorite shortcuts
alias gs="git status"
alias ga="git add \`git status -s --porcelain | pick -c 2\`" # git add (prompt for file)
alias gd="git rm \`git status -s | grep '^D' | pick -c 2\`" # git delete (prompt for file)
alias ll="ls -lah"
alias icd="cd \`ls -d -1 */ | pick\`" # interactive cd
alias ip="curl -s http://checkip.amazonaws.com"
alias tf="terraform"
alias tg="terragrunt"
alias k="kubectl"
alias kgp="kubectl get pods" # kube switch context
alias ksc="switch --show-preview=false" # kube switch context
alias kns="switch namespace" # kube namespace
alias tfinit="rm -rf .terra* && terraform init"
alias tfplan="terraform plan -out tfplan && echo 'or run tfapply'"
alias tfapply='terraform apply "tfplan"'
alias tginit="rm -rf .terragrunt-cache && terragrunt init"
alias tgplan="rm -rf .terragrunt-cache && terragrunt plan"
alias tgapply="rm -rf .terragrunt-cache && terragrunt apply"
alias lg="lazygit"
alias pd="podman"
alias docker="podman" # disable/remove this if using docker
alias vsc="open -n -b com.microsoft.VSCode --args $PWD"
alias utc="tz -q"
alias dot="cd ${HOME}/git/dotfiles"
alias files="cd ${HOME}/git/dotfiles && task files && source ~/.zprofile"

# handle zsh auto-completion
autoload -Uz compinit || echo "This might fail in bash"
compinit || echo "This might fail in bash"

# set up prompt
eval "$(oh-my-posh --init --shell ${SHORT_SHELL} --config ${HOME}/oh-my-posh.omp.json)"

# setup mcfly for history
eval "$(mcfly init ${SHORT_SHELL})"

# setup home brew
eval "$(/opt/homebrew/bin/brew shellenv)"

# setup direnv
eval "$(direnv hook ${SHORT_SHELL})"

# setup asdf
. /opt/homebrew/opt/asdf/libexec/asdf.sh

# setup switcher
source <(switcher init ${SHORT_SHELL})

# setup KUBECONFIG env var for any individual config files
unset KUBECONFIG && export KUBECONFIG=${HOME}/.kube/config
for config in $(grep -irl 'kind: Config' ${HOME}/.kube | sort | uniq);
do
    export KUBECONFIG=${KUBECONFIG}:${config}
done

function git_master_branch() {
    master_branch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
}

function git_branch() {
    branch="$(git branch 2> /dev/null | sed -e '/^[^*]/d' | tr -d '* ')"
    echo ${branch}
}

function gp() { # git push the current branch and set upstream tracking
    unset branch
    git_master_branch
    branch=$(git_branch)
    if [[ "$branch" != *"$master_branch"* ]]; then
        git push -u origin $branch
    elif [[ "$branch" == *"$master_branch"* ]]; then
        echo "refusing to push to master/main branch. create a branch and try again."
    fi
}

function gm() { # git checkout master and git pull
    git_master_branch # trigger the function to try and determine if master or main
    git checkout $master_branch
    checkoutrc=$?
    branch=$(git_branch)
    if [[ $(echo "$branch" | grep -v 'master\|main') || $checkoutrc != 0 ]]; then
        echo "Failed to checkout ${master_branch}"
    else
        git pull
        if [[ $? != 0 ]]; then
            echo "Failed to pull ${master_branch}"
        fi
    fi
}

function gb() { # git checkout master, git pull, git checkout -b branch_name
    gm #call gm function that git checkout master, git pull
    if [[ ! -z "$1" ]]; then
        git checkout -b $1
    else
        echo "You must pass a branch name"
    fi
}

function pr() { #get url of repo to start pr process in a browser
    branch=$(git_branch)
    echo "https://$(git ls-remote --get-url | sed 's|ssh:\/\/||g' | sed 's/git@//g' | sed 's/.git//g' | tr ':' '/')/merge_requests/new?merge_request[source_branch]=$branch"
}

function mkcd() {
    mkdir -p "${1}" && cd "${1}"
}

function mkvenv() {
    if [[ ! -z "$1" ]]; then
        venv_path="${HOME}/venvs/${1}"
        echo "Making new venv here: ${venv_path}"
        python -m venv ${venv_path}
        touch .envrc && echo "\nsource ${venv_path}/bin/activate\n" >> .envrc
        source ${venv_path}/bin/activate
        python -m ensurepip --upgrade
        echo "Don't forget to type in 'direnv allow' when prompted"
    else
        echo "Please pass a venv name"
    fi
}

function notes() {
    CURRENT_DATE=$(date +"%Y-%m-%d")
    YY=$(date +"%Y")
    MM=$(date +"%m")
    BASE_NOTES_DIR=${HOME}/notes
    CURRENT_NOTES_DIR=${BASE_NOTES_DIR}/${YY}/${MM}
    mkdir -p ${CURRENT_NOTES_DIR}
    touch ${CURRENT_NOTES_DIR}/${CURRENT_DATE}.md
    ln -sf ${CURRENT_NOTES_DIR}/${CURRENT_DATE}.md ${BASE_NOTES_DIR}/_notes.md
    code ${BASE_NOTES_DIR}/ ${BASE_NOTES_DIR}/_notes.md
}

function rebase() {
    git_master_branch
    git stash
    git fetch origin
    git rebase origin/${master_branch}
    git pull
    git stash pop
}

# Mac overrides/add-ons
if [[ "$OSTYPE" == *"darwin"* ]]; then
    # use gnu sed on mac
    alias sed=gsed

    function code() { #open dir or file in VS Code (osx only), WSL does this natively
        VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $*
    }
fi

function pass() { #generate a unique password of n length, ie: pass 16
    if [[ "$OSTYPE" == *"darwin"* ]]; then
        eval pwgen -Bs $1 1 | tr -d '\n' | pbcopy;
    else
        eval pwgen -Bs $1 1 | tr -d '\n';
    fi
}
